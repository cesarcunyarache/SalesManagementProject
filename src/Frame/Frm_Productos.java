/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Frame;

import BusinessObject.Categoria;
import BusinessObject.Productos;
import javax.swing.JOptionPane;
import JTable.EventAction;
import JTable.ModelAction;
import Message.Message;
import Notification.Notification;
import JTable.Table;
import JTable.TableCellAction;
import TransferObject.CategoriaDTO;
import TransferObject.ProductoDTO;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author cesarcunyarache
 */
public class Frm_Productos extends javax.swing.JPanel {

    ProductoDTO producto;
    EventAction eventAction;
    Productos ctr;
    DefaultTableModel df;
    JFrame frame;
    Categoria ca;
    Notification mensaje;
    Notification mensajeError;
    Vector<CategoriaDTO> c;
    DefaultComboBoxModel modelo;
    int id;

    public Frm_Productos(JFrame frame) {

        initComponents();
        ca = new Categoria(frame);
        modelo = new DefaultComboBoxModel(ca.mostrarCategoria());
        if (ca.mostrarCategoria() != null) {
            c = ca.mostrarCategoria();
        }
        cbo_categoria.setModel(modelo);
        ctr = new Productos(frame);
        table1.getCellEditor(0, 5);
        df = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 6) {
                    return true;
                }
                if (column == 7) {
                    return false;
                }

                return false;

            }
        };

        table1.fixTable(jScrollPane2);
        this.frame = frame;
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txt_codigo = new Components.TextField();
        txt_descripcion = new Components.TextField();
        txt_precio = new Components.TextField();
        txt_stock = new Components.TextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new JTable.Table();
        btn_agregar = new Components.ButtonShadow();
        cbo_categoria = new RSMaterialComponent.RSComboBoxMaterial();
        btn_actualizar = new Components.ButtonShadow();
        cbo_estado = new RSMaterialComponent.RSComboBoxMaterial();
        btn_reset4 = new Components.ButtonShadow();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_codigo.setEnabled(false);
        txt_codigo.setLabelText("Código");
        jPanel1.add(txt_codigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 290, -1));

        txt_descripcion.setLabelText("Descripción");
        jPanel1.add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 290, -1));

        txt_precio.setLabelText("Precio");
        txt_precio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_precioKeyTyped(evt);
            }
        });
        jPanel1.add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, 290, -1));

        txt_stock.setLabelText("Stock");
        txt_stock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_stockKeyTyped(evt);
            }
        });
        jPanel1.add(txt_stock, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 260, 290, -1));

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane2.setViewportView(table1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, 1050, 200));

        btn_agregar.setBackground(new java.awt.Color(51, 51, 51));
        btn_agregar.setForeground(new java.awt.Color(255, 255, 255));
        btn_agregar.setText("Agregar");
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_agregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 410, 110, -1));

        cbo_categoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        jPanel1.add(cbo_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 410, 280, 50));

        btn_actualizar.setBackground(new java.awt.Color(0, 153, 0));
        btn_actualizar.setForeground(new java.awt.Color(255, 255, 255));
        btn_actualizar.setText("✓");
        btn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_actualizarActionPerformed(evt);
            }
        });
        jPanel1.add(btn_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 410, 40, 40));

        cbo_estado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Seleccionar estado-", "Activo", "Inactivo" }));
        jPanel1.add(cbo_estado, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 330, 280, 50));

        btn_reset4.setForeground(new java.awt.Color(255, 255, 255));
        btn_reset4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/actualizar.png"))); // NOI18N
        btn_reset4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_reset4ActionPerformed(evt);
            }
        });
        jPanel1.add(btn_reset4, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 410, 40, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 968, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txt_precioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_precioKeyTyped
        char validar = evt.getKeyChar();

        if (Character.isLetter(validar)) {
            getToolkit().beep();
            evt.consume();
            mensajeError = new Notification("Ingrese solo valores numericos",
                    frame, Notification.Type.WARNING, Notification.Location.TOP_RIGHT);
            
        }
    }//GEN-LAST:event_txt_precioKeyTyped

    private void txt_stockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_stockKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9')) && (caracter != '\b')) {
            evt.consume();
            mensajeError = new Notification("Ingrese solo valores numericos",
                    frame, Notification.Type.WARNING, Notification.Location.TOP_RIGHT);
        }
    }//GEN-LAST:event_txt_stockKeyTyped

    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed
        if ( !txt_descripcion.getText().isEmpty()
                && !txt_precio.getText().isEmpty() && !txt_stock.getText().isEmpty()
                && !cbo_estado.getSelectedItem().equals("-Seleccionar estado-")
                && !modelo.getSelectedItem().equals("-Seleccione Categoria-")
               ) {

            String des = txt_descripcion.getText();
            double precio = Double.parseDouble(txt_precio.getText());
            int stock = Integer.parseInt(txt_stock.getText());
            String estado = (String) cbo_estado.getSelectedItem();
            CategoriaDTO aux = (CategoriaDTO) cbo_categoria.getSelectedItem();
            ctr.insertar(des, precio, stock, estado, aux.getId());
            init();
            limpiar();


        } else {
            mensajeError = new Notification("Uno o más campos vacios",
                    frame, Notification.Type.WARNING, Notification.Location.TOP_RIGHT);

        }
    }//GEN-LAST:event_btn_agregarActionPerformed

    private void btn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_actualizarActionPerformed

        if ( !txt_descripcion.getText().isEmpty()
                && !txt_precio.getText().isEmpty() && !txt_stock.getText().isEmpty()
                && !cbo_estado.getSelectedItem().equals("-Seleccionar estado-")
                && !modelo.getSelectedItem().equals("-Seleccione Categoria-")
                ) {

            int idProducto = Integer.parseInt(txt_codigo.getText());
            String des = txt_descripcion.getText();
            double precio = Double.parseDouble(txt_precio.getText());
            int stock = Integer.parseInt(txt_stock.getText());
            String estado = (String) cbo_estado.getSelectedItem();
            CategoriaDTO aux = (CategoriaDTO) cbo_categoria.getSelectedItem();
            ctr.Modificar(idProducto, des, precio, stock, estado,aux.getId());
            init();
            limpiar();


        } else {
            mensajeError = new Notification("Uno o más campos vacios",
                    frame, Notification.Type.WARNING, Notification.Location.TOP_RIGHT);

        }
    }//GEN-LAST:event_btn_actualizarActionPerformed

    private void btn_reset4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_reset4ActionPerformed
        modelo = new DefaultComboBoxModel(ca.mostrarCategoria());
        cbo_categoria.setModel(modelo);
        limpiar();
        init();

    }//GEN-LAST:event_btn_reset4ActionPerformed

    public void init() {

        eventAction = new EventAction<ProductoDTO>() {
            @Override
            public void delete(ProductoDTO aux) {
                if (showMessage("Eliminar Producto : " + aux.getDescripcion())) {

                    id = (int) (table1.getValueAt(table1.getSelectedRow(), 0));
                    ctr.Eliminar(id);
                    llenarTabla(eventAction);

                    System.out.println("User click OK");
                } else {
                    System.out.println("User click Cancel");
                }
            }

            @Override
            public void update(ProductoDTO aux) {
                if (showMessage("Actualizar Producto : " + aux.getDescripcion())) {
                   try {
                    int id = (int) (table1.getValueAt(table1.getSelectedRow(), 0));
                    ProductoDTO var = ctr.Buscar(id);

                    if (var != null) {
                        
                        txt_codigo.setText(String.valueOf(var.getCodigo()));
                        txt_descripcion.setText(var.getDescripcion());
                        txt_precio.setText(String.valueOf(var.getPrecio()));
                        txt_stock.setText(String.valueOf(var.getStock()));
                        cbo_estado.setSelectedItem(var.getEstado());
                        for (CategoriaDTO categoria : c) {
                            if (categoria.getId() == var.getIdcategoria()) {
                                modelo.setSelectedItem(categoria);
                            }
                        }
                        llenarTabla(eventAction);

                        System.out.println("User click OK");
                    }
                   } catch (Exception e){
                       System.out.println(e);
                   }

                } else {
                    System.out.println("User click Cancel");
                }
            }
        };

        llenarTabla(eventAction);
    }

    public void llenarTabla(EventAction eventAction) {

        df.setColumnCount(0);
        df.setRowCount(0);

        String[] cabezera = {"Código", "Descripción", "Precio", "Stock",  "Estado", "idCategoria", "Accion"};
        df.setColumnIdentifiers(cabezera);
        ModelAction model;
        Object[] datos = new Object[df.getColumnCount()];

        ArrayList<ProductoDTO> lista = new ArrayList<>();
        lista = ctr.lista();

        if (lista != null) {

            for (int i = 0; i < lista.size(); i++) {
                ProductoDTO c = lista.get(i);

                datos[0] = c.getCodigo();
                datos[1] = c.getDescripcion();
                datos[2] = c.getPrecio();
                datos[3] = c.getStock();
                datos[4] = c.getEstado();
                datos[5] = c.getIdcategoria();
                datos[6] = model = new ModelAction<ProductoDTO>(c, eventAction);

                df.addRow(datos);
            }

            table1.setModel(df);

        }
    }

    private boolean showMessage(String message) {
        Message obj = new Message(frame, true);
        obj.showMessage(message);
        return obj.isOk();
    }

    public void limpiar() {
        txt_codigo.setText("");
        txt_descripcion.setText("");
        txt_precio.setText("");
        txt_stock.setText("");
        cbo_estado.setSelectedIndex(0);
        cbo_categoria.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Components.ButtonShadow btn_actualizar;
    private Components.ButtonShadow btn_agregar;
    private Components.ButtonShadow btn_reset4;
    private RSMaterialComponent.RSComboBoxMaterial cbo_categoria;
    private RSMaterialComponent.RSComboBoxMaterial cbo_estado;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private JTable.Table table1;
    private Components.TextField txt_codigo;
    private Components.TextField txt_descripcion;
    private Components.TextField txt_precio;
    private Components.TextField txt_stock;
    // End of variables declaration//GEN-END:variables
}
